#!/usr/bin/env python3

import copy
import json
import logging
import os
import subprocess
import sys
from pathlib import Path
logging.basicConfig(
    level=logging.DEBUG,
    handlers=[logging.StreamHandler(sys.stderr)]
)

import getopt

IMAGE_NAME = "docker-caroll"
HOSTNAME = "docker-caroll"

get_opt = getopt.getopt

args = {}

def parse_pd_cli_args():
  global args
  cli_args = sys.argv[1:]
  args = {
    'command': 'bash',
    'params' : {},
    'tasklist': ['make-perfectdark'],
    'properties' : {}
  }
  try:
    command = None
    try: command = cli_args[0]
    except: pass
    if not command:
      command = args['command']
    cli_args = cli_args[1:]
    assert type(command) ==  str, "must include valid command."
    args['command'] = command
  except:
    raise

  oplist = []
  try:
    oplist, params = get_opt(cli_args, "", ["tasklist=", "properties="])
    logging.debug(f'oplist: {oplist}')
    logging.debug(f'params: {params}')
    for o in oplist:
      if o and o[0] == '--tasklist':
        args['tasklist'] = [ p for p in o[1].split(",") ]
      if o and o[0] == '--properites':
        temp = [p for p in o[1]]
        temp2 = {}
        for t in temp:
          temp2[t.split('=')[0]] = t.split('=')[1]
        args['properties'] = temp2
        del(temp2)
        del(temp)

    args['params'] = params
    return command, args
  except Exception as ex:
    logging.error(ex)
    # usage()
    raise

get_env = os.environ.get

class PDEnv:
  def __init__(self):
    # mounts and environemnt varialbes as they appear in docker container
    self._pd_env_vars = {

      # ryan / perfect-dark
      "PD": "/app/perfect-dark",
      'PIRACYCHECKS': get_env('PIRACYCHECKS', '1'),
      'MATCHING': get_env('MATCHING', '1'),
      'COMPILER': get_env('COMPILER', 'ido'),
      'ROMID': get_env('ROMID', 'ntsc-final'),
      'PDTOOLS': "/app/pdtools",

      # catherine / MouseInjector
      # These are meant to be passed as-is to the container
      # to override the windows-bits in the makefile
      "MOUSEINJECTOR":  "/app/MouseInjector",
      'MINGWDIR' :  '/usr/bin',
      'CC' :  '/usr/bin/i686-w64-mingw32-gcc-win32',
      'WINDRES': "/usr/bin/i686-w64-mingw32-windres",

      'GEPD_ZIP' : "/app/gepd.zip",
      'GEPD_ARCHIVE' : "/app/gepd_archive",
      'GEPD_TARGET' : "/app/gepd_target",

      "LEYLINELIB": "/app/leylinelib",

      # system env
      "SSH_AUTH_SOCK":  '/ssh-agent',
    }
    # NOTE: check that environment variables above are set
    # warn if not set. A lot of this is optional
    for k,v in self._pd_env_vars.items():
      try:
        assert self._pd_env_vars[k], logging.warning(f"failed to detect environment variable value for {k}")
      except: pass

    self._pd_env_paths = {
      # Used by Ryan's pdtools. I'm using it to pick up the mount dir
      # for perfect-dark builds
      #~/src/perfect-dark
      'PD' : get_env('PD'),
      'PDTOOLS': get_env('PDTOOLS'),

      # Mouse Injector dir
      # ~/src/MouseInjectorPlugin
      "MOUSEINJECTOR" : get_env('MOUSEINJECTOR'),

      # psake content
      # this is almost always just whatever is packaged with this repo
      # but I was thinking of enabling an override
      'PDPSAKE': get_env('PDPSAKE', f"{Path(__file__ ).parents[0].resolve()}/scripts/psake"),
      'PDPYTHON': get_env('PDPYTHON', f"{Path(__file__ ).parents[0].resolve()}"),
      'PDSHARE': get_env('PDSHARE', f"{Path(__file__ ).parents[0].resolve()}/../share"),

      'GEPD_ZIP': get_env('GEPD_ZIP'),
      'GEPD_ARCHIVE': get_env('GEPD_ARCHIVE'),
      'GEPD_TARGET': get_env('GEPD_TARGET'),

      'LEYLINELIB': get_env('LEYLINELIB', str(Path(__file__).parents[1] / "lib/packages/python")),

      # ssh
      'SSH_AUTH_SOCK' : get_env('SSH_AUTH_SOCK')
    }
    # NOTE: check that environment variables above are set...or things will fail
    for k,v in self._pd_env_paths.items():
      assert self._pd_env_paths[k], logging.error(f"failed to detect environment variable value for {k}")

    self._pd_mounts = {
      # build mounts
      self._pd_env_paths['PD'] : '/app/perfect-dark',
      self._pd_env_paths['MOUSEINJECTOR']: '/app/MouseInjector',

      # tooling mounts
      self._pd_env_paths['PDPSAKE']: "/app/psake",
      self._pd_env_paths['PDPYTHON']: "/app/python",
      self._pd_env_paths['PDSHARE']: "/app/share",
      self._pd_env_paths['PDTOOLS']: "/app/pdtools",
      self._pd_env_paths['LEYLINELIB']: "/usr/lib/python3/dist-packages",

      # resource mounts
      self._pd_env_paths['GEPD_ZIP']: "/app/gepd.zip",
      self._pd_env_paths['GEPD_ARCHIVE']: "/app/gepd_archive",
      self._pd_env_paths['GEPD_TARGET']: "/app/gepd_target",

      # system mount
      self._pd_env_paths['SSH_AUTH_SOCK']: "/ssh-agent"
    }

    self._pd_env_vars.update({
      # docker-only variable for marshing host-PD as data
      'PD_HOST' : self._pd_env_paths['PD'],
      'PDSHARE' : self.get_pd_mount('PDSHARE'),
      'PDPYTHON' : self.get_pd_mount('PDPYTHON'),
      'GEPD_TARGET_HOST': self._pd_env_paths['GEPD_TARGET'],
      'GEPD_ARCHIVE_HOST': self._pd_env_paths['GEPD_ARCHIVE'],
    })

    # special MouseInjector compiler flags
    if get_env('DEBUG_BUILD'):
      self._pd_env_vars.update({
        'DEBUG_BUILD': get_env('DEBUG_BUILD')
      })

    if get_env('USE_DISCORD_PRESENCE'):
      self._pd_env_vars.update({
        'USE_DISCORD_PRESENCE': get_env('USE_DISCORD_PRESENCE')
      })

    if get_env('SPEEDRUN_BUILD'):
      self._pd_env_vars.update({
        'SPEEDRUN_BUILD': get_env('SPEEDRUN_BUILD')
      })

    if get_env('DECOMP_BUILD'):
      self._pd_env_vars.update({
        'DECOMP_BUILD': get_env('DECOMP_BUILD')
      })

  def get_pd_mount(self, k):
    return self._pd_mounts[self._pd_env_paths[k]]

pd_env = PDEnv()

# First, we collect or set these build-related environment variables from the host environment
pd_env_vars = pd_env._pd_env_vars
# location of path-likes on host system
pd_env_paths = pd_env._pd_env_paths
# resolve mounts to pass to docker for build
pd_mounts = pd_env._pd_mounts


def print_host_env():
  logging.debug(f"pd command: {args.get('command')}")
  logging.debug(f"pd args: {args}")
  logging.debug("Environment variables")
  logging.debug(json.dumps(pd_env_vars, indent=2))
  logging.debug("Host system paths")
  logging.debug(json.dumps(pd_env_paths, indent=2))
  logging.debug("Container mounts")
  logging.debug(json.dumps(pd_mounts, indent=2))


def get_docker_caroll_root():
    return Path(__file__).parents[0]


def get_pdroot(path: Path = os.getcwd()) -> Path:
    """
    Given a detected os.getcwd(),
    go updir until the 'root' of the pd project is found

    """
    path = Path(path).expanduser().resolve()

    def is_pdroot(path: Path) -> bool:
        """
        Pretty sure that Makefile is forever in this project

        this is a shameful, but good-enough check
        to get reasonable confidence that we're in a perfect-dark project
        """

        return Path("makefile") or Path(path / "Makefile").exists() and\
            Path(path / "stagetable.txt").exists() and\
            Path(path / "checksums.ntsc-beta.md5")
    my_ex = Exception("Not in a pd project!")
    if f'{path}' == "/":
        raise my_ex
    if is_pdroot(path):
        return path
    return get_pdroot(path / "..")


# ==== Commands ====
# creates container

def create_docker_caroll(**kwargs):
  if not kwargs: kwargs = {}
  kwargs['command'] = ''
  kwargs['docker_options'] = '-d'
  kwargs['runner'] = subprocess.check_output
  kwargs['current_user'] = False
  container_id = docker_cmd(**kwargs).decode('utf-8').strip()
  logging.debug(f'container_id: {container_id}')
  return container_id


def docker_exec(**kwargs):
  if not kwargs: kwargs = {}
  kwargs['docker_cmd'] = 'exec'
  kwargs['docker_resource'] = kwargs['container_id']
  docker_cmd(**kwargs)


def psake(**kwargs):
  # run our bootstrap psake script
  # and pass whatever parameters
  # are provided on cli
  logging.debug('psake: begin')
  # TODO: add tasklist and property params
  # pass them to psake
  # run-psake will parse it out from the json we send it
  params = {k:v for k,v in kwargs.get('params', {}).items() if k in [
    'properties',
    'command',
    'tasklist'
  ]}
  import base64
  base_psake_command = f"run-psake " +\
    base64.b64encode( f"{json.dumps(dict(params))}".encode("utf8") ).decode("utf8")
  command = base_psake_command
  kwargs['command'] = base_psake_command
  # need to run docker_caroll w/ mounts
  # mount our psake scripts
  docker_exec(**kwargs)


# all the other dockery things will eventually run this
def docker_cmd(image_name = IMAGE_NAME,
    hostname = HOSTNAME,
    command = "",
    docker_options = "-it",
    docker_cmd = 'run',
    current_user = True,
    params=None,
    mounts=None,
    # image or container ID
    docker_resource = IMAGE_NAME,
    runner = subprocess.check_call,
    stdout_null = False,
    **kwargs):
    if not params: params = {}

    if isinstance(params, list):
      params_tail=[p for p in params if p]

    if isinstance(params, dict):
      params_tail = params.get('params', [])
    #logging.debug(f'docker_cmd: {locals()}')
    if not mounts: mounts = {}
    def working_directory(command):
      # default: /app
      workdir = "/app"
      # if command startswith make and get_pdroot passes, use pdroot
      pd_root = None
      r = None
      try: pd_root = get_pdroot(os.getcwd())
      except: pass

      def _root_to_mount(w):
        try:
          return pd_mounts[str(w)]
        except:
          logging.debug(KeyError(f"map current project directory to container directory for workdir: {w}. Please make check these envrionment variables: {pd_env_paths}"))
          return "/app/perfect-dark"


      if "run-psake" in command:
        r = "/app/psake"

      if not r and pd_root:
        r = _root_to_mount(pd_root)

      r = f"-w {r}"
      return r
    def environment_variable(k, v):
      return f"--env {k}={v}"
    def bind_mount(source, dest):
        '''
        parameter source: path-ish on host system. Converted to pathlib and resolve is used.
        parameter destination: path-ish on docker image. Converted to string and used as-is.
        rvalue: --mount parameter for `docker run`
        '''
        return "--mount type=bind,source=" + str(Path(source).resolve()) + ",target=" + str( dest )

    # legacy mode: mount project dir in to /pd and just run it
    # this is what happens when running make inside a perfect-dark / MouseInjector project
    #
    # ensamble mode: mount directories per config and load command
    # everything else. Useful for running psake cycles.
    #


    rmstr = '--rm'
    userstr = "--user " +  str(os.getuid()) + ":" + str(os.getgid())
    homestr = f"-v {get_env('HOME')}:/home/u1"
    hosttr = f'-h={hostname}'
    nethost = ""
    if docker_cmd != 'run':
      rmstr = ''
      hosttr = ''
      homestr = ''
      nethost = ''
    if not current_user:
      userstr = ''

    docker_command = " ".join([
      f"docker {docker_cmd}",
      # pretty hostname for terminal
      nethost,
      hosttr,
      *[
        # everything else can be passed as-is
        *[environment_variable(k,v) for k,v in pd_env_vars.items()]
      ],
      # # sensible permissions for generated artifacts
      userstr,
      *[bind_mount(k, v) for k,v in pd_mounts.items() if docker_cmd == 'run'],
      homestr,
      working_directory(command),
      # interactive terminal
      docker_options,
      # clean up after ourselves
      rmstr,
      # image name
      docker_resource,
      # command to run. usually bash or some invocation of make
      command,
      *[p for p in params_tail]
    ])
    if stdout_null:
      docker_command = f"{docker_command} > /dev/null"
    logging.info(docker_command)
    return runner(docker_command, shell=True)


def add_current_user(**kwargs):
  if not kwargs: kwargs = {}
  # runtime user creation sh snippet
  # pasted and modified from https://unix.stackexchange.com/questions/524268/running-git-or-ssh-client-in-docker-as-user-no-user-exists-for-uid
  kwargs['command'] = "sh -c " + '"' + "[ -x /usr/sbin/useradd ] && useradd -m -u $(id -u) u1 -s /bin/sh || adduser -D -u $(id -u) u1 -s /bin/bash;" + '"'
  kwargs['current_user'] = False
  kwargs['stdout_null'] = True
  docker_exec(**kwargs)


def pd_cli(
        image_name=IMAGE_NAME,
        hostname=HOSTNAME,
        command="bash",
        params=None,
        **kwargs):
    '''
    cli dispatcher
    '''
    # start container
    container_id = create_docker_caroll(**params)

    cmds = {
      # this points to a function
      'psake' : psake,
      # points to container creation function
      'container': create_docker_caroll
    }
    # slurp up all locals into params dictionary for later use
    params = copy.deepcopy(locals())
    # retval of docker command, if any
    r = None
    # exceptions during docker command
    cmd_e = None
    try:
      add_current_user(**params)

      params['runner'] = subprocess.call
      try:
        if command not in cmds:
          return docker_exec(**params)
        # TODO: exec 'invoke-command-as-user' script
        r = cmds[command](**params)
      except Exception as ex:
        cmd_e = ex
        logging.error(ex)
    except:
      pass
    finally:
      logging.info("cleaning up container...")
      subprocess.Popen([
        'docker',
        'container',
        'stop',
        container_id
      ],
      stdout=subprocess.DEVNULL)
      return r


if __name__ == "__main__":

    print_host_env()
    command = None
    try:
      command, args = parse_pd_cli_args()
    except Exception as ex:
      logging.error(f"Failed to parse cli args: {ex}")
      raise
    pd_cli(command=command, params=args)
    print_host_env()
