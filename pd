#!/usr/bin/env python3

##### python
import logging
import sys
import subprocess
import os
import tempfile
from pathlib import Path

##### personalization
IMAGE_NAME = "docker-caroll"
HOSTNAME = "docker-caroll"

def get_pdroot(path: Path = os.getcwd()) -> Path:
  """
  Given a detected os.getcwd(), go updir until the 'root' of the pd project is found
  """
  path=Path(path).expanduser().resolve()
  def is_pdroot(path: Path) -> bool:
    """
    Pretty sure that Makefile is forever in this project
    """
    return Path(path / "Makefile").exists()

  if f'{path}' == "/": raise Exception("Not in a pd project!")
  if is_pdroot(path): return path
  return get_pdroot(path / "..")


def run_pd(image_name = IMAGE_NAME,
           hostname = HOSTNAME,
           command = "bash"
           ):
    '''
    Runs a shell command in the pd-rind image

    Uses subprocess.call(docker_command, shell=True)
    '''
    def bind_mount(source, dest):
        '''
        parameter source: path-ish on host system. Converted to pathlib and resolve is used.
        parameter destination: path-ish on docker image. Converted to string and used as-is.
        rvalue: --mount parameter for `docker run`
        '''
        return "--mount type=bind,source=" + str(Path(source).resolve()) + ",target=" + str( dest )

    docker_command = " ".join([
      "docker run",
      # pretty hostname for terminal
      "-h=" + hostname,
      # pretty user for terminal
      "--user " +  str(os.getuid()) + ":" + str(os.getgid()),
      bind_mount(get_pdroot(os.getcwd()), "/pd"),
      # interactive terminal
      "-it",
      # clean up after ourselves
      "--rm",
      # image name
      IMAGE_NAME,
      # command to run. usually bash or some invocation of make
      command
    ])
    print(docker_command)
    subprocess.call(docker_command , shell=True)


###############
#    Main     #
###############
try:
    command = " ".join(list(sys.argv[1:]))
except Exception as ex:
    command = "bash"

run_pd(command=command)
